package main

import (
	"github.com/stretchr/testify/assert"
	"testing"
)

func TestMainAccountGroups_generateMainAccountGroups(t *testing.T) {
	// given
	config := OrganisationRolesConfig{
		Accounts: map[string]Account{
			"develop": {
				AccountId: "123456",
			},
			"test": {
				AccountId: "435436",
			},
		},
		Groups: map[string]Group{
			"dummy": {
				ManagedPolicies: []string{
					"arn:aws:iam::aws:policy/ReadOnlyAccess",
				},
			},
			"dummyAdmin": {
				ManagedPolicies: []string{
					"arn:aws:iam::aws:policy/ReadOnlyAccess",
					"arn:aws:iam::aws:policy/AdministratorAccess",
				},
			},
		},
	}

	// when
	result := generateMainAccountGroups(&config)

	// then
	expectedResult := `# Generated by Terraless Organisation Roles - generateMainAccountGroups
resource "aws_iam_group" "group-dummy" {
  name = "dummy"
}

resource "aws_iam_group_policy_attachment" "group-dummy-a-0" {
  group      = aws_iam_group.group-dummy.name
  policy_arn = "arn:aws:iam::aws:policy/ReadOnlyAccess"
}

data "aws_iam_policy_document" "allow-assume-dummy" {
  statement {
    effect = "Allow"

    actions = ["sts:AssumeRole"]

    resources = [
      "arn:aws:iam::123456:role/dummy",
      "arn:aws:iam::435436:role/dummy",
      ]

    condition {
      test = "Bool"
      values = ["true"]
      variable = "aws:MultiFactorAuthPresent"
    }
  }
}

resource "aws_iam_policy" "allow-assume-dummy" {
  name = "allow-assume-dummy"
  policy = data.aws_iam_policy_document.allow-assume-dummy.json
}

resource "aws_iam_group_policy_attachment" "allow-assume-dummy" {
  group      = aws_iam_group.group-dummy.name
  policy_arn = aws_iam_policy.allow-assume-dummy.arn
}

resource "aws_iam_group" "group-dummyAdmin" {
  name = "dummyAdmin"
}

resource "aws_iam_group_policy_attachment" "group-dummyAdmin-a-0" {
  group      = aws_iam_group.group-dummyAdmin.name
  policy_arn = "arn:aws:iam::aws:policy/ReadOnlyAccess"
}

data "aws_iam_policy_document" "allow-assume-dummyAdmin" {
  statement {
    effect = "Allow"

    actions = ["sts:AssumeRole"]

    resources = [
      "arn:aws:iam::123456:role/dummyAdmin",
      "arn:aws:iam::435436:role/dummyAdmin",
      ]

    condition {
      test = "Bool"
      values = ["true"]
      variable = "aws:MultiFactorAuthPresent"
    }
  }
}

resource "aws_iam_policy" "allow-assume-dummyAdmin" {
  name = "allow-assume-dummyAdmin"
  policy = data.aws_iam_policy_document.allow-assume-dummyAdmin.json
}

resource "aws_iam_group_policy_attachment" "allow-assume-dummyAdmin" {
  group      = aws_iam_group.group-dummyAdmin.name
  policy_arn = aws_iam_policy.allow-assume-dummyAdmin.arn
}

resource "aws_iam_group_policy_attachment" "group-dummyAdmin-a-1" {
  group      = aws_iam_group.group-dummyAdmin.name
  policy_arn = "arn:aws:iam::aws:policy/AdministratorAccess"
}

data "aws_iam_policy_document" "allow-assume-dummyAdmin" {
  statement {
    effect = "Allow"

    actions = ["sts:AssumeRole"]

    resources = [
      "arn:aws:iam::123456:role/dummyAdmin",
      "arn:aws:iam::435436:role/dummyAdmin",
      ]

    condition {
      test = "Bool"
      values = ["true"]
      variable = "aws:MultiFactorAuthPresent"
    }
  }
}

resource "aws_iam_policy" "allow-assume-dummyAdmin" {
  name = "allow-assume-dummyAdmin"
  policy = data.aws_iam_policy_document.allow-assume-dummyAdmin.json
}

resource "aws_iam_group_policy_attachment" "allow-assume-dummyAdmin" {
  group      = aws_iam_group.group-dummyAdmin.name
  policy_arn = aws_iam_policy.allow-assume-dummyAdmin.arn
}
`

	assert.Equal(t, expectedResult, result.String())
}
