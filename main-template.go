package main

import (
	"bytes"
)

const (
	providerTemplate = `
provider "aws" {
  region = "{{ .Variables.Region }}"
  profile = "{{ .Variables.MainProfile }}"
}

{{ range $accountName, $accountData := .Accounts }}
provider "aws" {
  region = var.region
	assume_role {
		role_arn = "arn:aws:iam::{{ $accountData.AccountId }}:role/{{ $accountData.RoleName }}"
	}
  alias = "{{ $accountName }}"
}

data "aws_caller_identity" "{{ $accountName }}" {
  provider = aws.{{ $accountName }}
}

{{ end }}
data "aws_caller_identity" "current" {}
data "aws_region" "current" {}

terraform {
  backend "remote" {
    hostname = "app.terraform.io"
    organization = "{{ .Variables.BackendOrganization }}"

    workspaces {
      name = "terraless-organisation-roles"
    }
  }
}

variable "region" {
	type = string
  default = "{{ .Variables.Region }}"
}

variable "root-account-id" {
	type = string
	default = "{{ .Variables.MainAccountId }}"
}

`
)

func generateMainTemplate(config *OrganisationRolesConfig) bytes.Buffer {
	buffer := bytes.Buffer{}

	buffer.WriteString("# Generated by Terraless Organisation Roles - generateMainTemplate")
	buffer = renderToBuffer(config, providerTemplate, "provider-template", buffer)

	return buffer
}
