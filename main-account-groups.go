package main

import (
	"bytes"
	"fmt"
)

const (
	iamGroupTemplate = `
resource "aws_iam_group" "group-{{ .Name }}" {
  name = "{{ .Name }}"
}
`

	iamGroupPolicyAttachment = `
resource "aws_iam_group_policy_attachment" "group-{{ .Name }}-a-{{ .Idx }}" {
  group      = aws_iam_group.group-{{ .Name }}.name
  policy_arn = "{{ .Policy }}"
}
`

	iamGroupAssume = `
data "aws_iam_policy_document" "allow-assume-{{ .Name }}" {
  statement {
    effect = "Allow"

    actions = ["sts:AssumeRole"]

    resources = [
      {{ range $key, $val := .Arns }}"{{ $val }}",
      {{ end -}}
    ]

    condition {
      test = "Bool"
      values = ["true"]
      variable = "aws:MultiFactorAuthPresent"
    }
  }
}

resource "aws_iam_policy" "allow-assume-{{ .Name }}" {
  name = "allow-assume-{{ .Name }}"
  policy = data.aws_iam_policy_document.allow-assume-{{ .Name }}.json
}

resource "aws_iam_group_policy_attachment" "allow-assume-{{ .Name }}" {
  group      = aws_iam_group.group-{{ .Name }}.name
  policy_arn = aws_iam_policy.allow-assume-{{ .Name }}.arn
}
`
)

func generateMainAccountGroups(config *OrganisationRolesConfig) bytes.Buffer {
	buffer := bytes.Buffer{}

	buffer.WriteString("# Generated by Terraless Organisation Roles - generateMainAccountGroups")

	for groupName, groupData := range config.Groups {
		var data = map[string]interface{}{
			"Name":            groupName,
			"ManagedPolicies": groupData.ManagedPolicies,
		}
		buffer = renderToBuffer(data, iamGroupTemplate, "iam-group", buffer)

		for idx, policy := range groupData.ManagedPolicies {
			data = map[string]interface{} {
				"Name":   groupName,
				"Idx":    idx,
				"Policy": policy,
				"Arns": buildArns(config.Accounts, groupName),
			}

			buffer = renderToBuffer(data, iamGroupPolicyAttachment, "iam_group_policy_attachment", buffer)
			buffer = renderToBuffer(data, iamGroupAssume, "iam_group_assume", buffer)
		}
	}

	return buffer
}

func buildArns(accounts map[string]Account, role string) []string {
	var result []string

	for _, accountData := range accounts {
		result = append(result, fmt.Sprintf("arn:aws:iam::%s:role/%s", accountData.AccountId, role))
	}

	return result
}
